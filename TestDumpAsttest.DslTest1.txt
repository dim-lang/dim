A_DeclList204 {

A_VarDecl203: x = 1@A_i64188 + 6@A_i64189 / - 3@A_i64190 * 4@A_i64193 + 3@A_i64194 % - 2@A_i64195;
A_VarDecl208: y = 0@A_i64205;
A_VarDecl214: z = x@A_id209 + y@A_id210;
A_VarDecl218: a9 = 228@A_i64215;
A_VarDecl222: a18 = 123.901000@A_f64219;

Hello@A_FuncDecl261() => {
	a@A_id223=1@A_i64224;
	b@A_id228=2@A_i64229;
	a@A_id232=a@A_id233 + b@A_id234;
	A_return239 a@A_id238;
	if (a@A_id240 < b@A_id241) 
	print@A_Call245(a@A_id243); 
else 	print@A_Call249(b@A_id247);
	while (a@A_id252 < b@A_id253)
print@A_Call257(a@A_id255);
}


ok@A_FuncDecl266() => {
	A_return263 0@A_i64262;
}


testOnTokenLexer@A_FuncDecl281() => {
	print@A_Call269(This is going to be a very long string, which is used for testing coli DSL language@A_string267);
	print@A_Call274(Since our language defines a string between double quotes, with new line break like this\n and this \r\n.
Let's see if it works as we expect.
Maybe we need more troubleshooting while testing.@A_string272);
	print@A_Call278(Try punctuations like if \"'\" will stop this string literals.@A_string276);
}

}
