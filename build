#! /usr/bin/env bash
# Copyright 2019- <coli-lang>
# Apache License Version 2.0

# ---- library ----

ROOT=`pwd`
FOS=$(bash -c "echo \$OSTYPE")

function init_macos() {
    echo [coli] prepare compiler and toolchain through homebrew
    brew install cmake automake autoconf
    echo [coli] prepare compiler and toolchain through homebrew - done
    echo [coli] prepare spdlog, fmt, boost, icu4c, gperftools through homebrew
    brew install spdlog fmt boost icu4c gperftools
    echo [coli] prepare spdlog, fmt, boost, icu4c, gperftools through homebrew - done
}

function init_bsd() {
    sudo echo [coli] prepare compiler and toolchain through pkg || { echo [coli] sudo not found; exit 3; }
    sudo pkg install -y cmake automake autoconf
    echo [coli] prepare compiler and toolchain through pkg - done
    echo [coli] prepare spdlog, libfmt, boost-all, icu through pkg
    sudo pkg install -y spdlog libfmt boost-all icu
    echo [coli] prepare spdlog, libfmt, boost-all, icu through pkg - done
}

function init_apt() {
    sudo echo [coli] prepare compiler and toolchain through apt || { echo [coli] sudo not found; exit 3; }
    sudo apt-get install -y gcc g++ make cmake automake autoconf
    echo [coli] prepare compiler and toolchain through apt - done
    echo [coli] prepare libboost-all-dev, libicu-dev, libgoogle-perftools-dev, libncurses-dev through apt
    sudo apt-get install -y libboost-all-dev libicu-dev libgoogle-perftools-dev libncurses-dev
    echo [coli] prepare libboost-all-dev, libicu-dev, libgoogle-perftools-dev, libncurses-dev through apt - done
}

function init_dnf() {
    sudo echo [coli] prepare compiler and toolchain through dnf || { echo [coli] sudo not found; exit 3; }
    sudo dnf install -y gcc g++ make cmake automake autoconf
    echo [coli] prepare compiler and toolchain through dnf - done
    echo [coli] prepare boost-devel, libicu-devel, gperftools-devel through dnf
    sudo dnf install -y boost-devel libicu-devel gperftools-devel
    echo [coli] prepare boost-devel, libicu-devel, gperftools-devel through dnf - done
}

function init_pacman() {
    sudo echo [coli] prepare compiler and toolchain through pacman || { echo [coli] sudo not found; exit 3; }
    yes | sudo pacman -S gcc make cmake automake autoconf
    echo [coli] prepare compiler and toolchain through pacman - done
    echo [coli] prepare boost, icu, gperftools through pacman
    yes | sudo pacman -S boost icu gperftools
    echo [coli] prepare boost, icu, gperftools through pacman - done
}

function init_zypper() {
    sudo echo [coli] prepare compiler and toolchain through zypper || { echo [coli] sudo not found; exit 3; }
    sudo zypper install -y gcc gcc-c++ gcc-32bit gcc-c++-32bit make cmake automake autoconf
    echo [coli] prepare compiler and toolchain through zypper - done
    echo [coli] prepare libboost-devel, libicu-devel, gperftools-devel through zypper
    sudo zypper install -y libboost*-devel libboost*-32bit libicu-devel libicu-devel-32bit gperftools-devel
    echo [coli] prepare libboost-devel, libicu-devel, gperftools-devel through zypper - done
}

function init_linux() {
    cd $ROOT
    echo [coli] prepare gabime/spdlog v1.3.1
    if [ ! -d src/spdlog ]; then
        cd src && git clone -b 'v1.3.1' --single-branch --depth 1 https://github.com/gabime/spdlog.git && cd ..
    fi
    echo [coli] prepare gabime/spdlog v1.3.1 - done
    echo [coli] prepare fmtlib/fmt 5.3.0
    if [ ! -d src/fmt ]; then
        cd src && git clone -b '5.3.0' --single-branch --depth 1 https://github.com/fmtlib/fmt.git && cd ..
    fi
    echo [coli] prepare fmtlib/fmt 5.3.0 - done
    if [ $(uname) == "Linux" ]; then
        if cat /etc/*release | grep ^NAME | grep Ubuntu 1>/dev/null 2>&1; then
            init_apt
        elif cat /etc/*release | grep ^NAME | grep Debian 1>/dev/null 2>&1; then
            init_apt
        elif cat /etc/*release | grep ^NAME | grep Fedora 1>/dev/null 2>&1; then
            init_dnf
        elif cat /etc/*release | grep ^NAME | grep Manjaro 1>/dev/null 2>&1; then
            init_pacman
        elif cat /etc/*release | grep ^NAME | grep openSUSE 1>/dev/null 2>&1; then
            init_zypper
        else
            echo [coli] Error! Unknown Operating System $(uname)! && exit 3
        fi
    else
        echo [coli] Error! Unknown Operating System $(uname)! && exit 3
    fi
}

function init_all() {
    cd $ROOT
    echo [coli] prepare catchorg/Catch2 v2.9.1
    if [ ! -d test/Catch2 ]; then
        cd test && git clone -b 'v2.9.1' --single-branch --depth 1 https://github.com/catchorg/Catch2.git && cd ..
    fi
    echo [coli] prepare catchorg/Catch2 v2.9.1 - done
}

function clean_all() {
    cd $ROOT
    rm *.log >>/dev/null 2>&1
    if [ -d debug ]; then cd debug && make clean && cd ..; fi
    if [ -d release ]; then cd release && make clean && cd ..; fi
}

function purge_all() {
    cd $ROOT
    rm *.log >>/dev/null 2>&1
    if [ -d debug ]; then rm -rf debug>>/dev/null 2>&1; fi
    if [ -d release ]; then rm -rf release>>/dev/null 2>&1; fi
}

function build_debug() {
    cd $ROOT/src
    if [ -f Token.yy.cpp ]; then rm Token.yy.cpp; fi
    if [ -f Parser.tab.hpp ]; then rm Parser.tab.hpp; fi
    if [ -f Parser.tab.cpp ]; then rm Parser.tab.cpp; fi
    if [ "$1" = "-d" ]; then
        flex -d -o Token.yy.cpp Token.l
        bison --debug -d -v -o Parser.tab.cpp Parser.y
    else
        flex -o Token.yy.cpp Token.l
        bison -d -v -o Parser.tab.cpp Parser.y
    fi

    cd $ROOT
    DEBUG=debug
    if [ ! -d $DEBUG ]; then mkdir $DEBUG; fi

    case "$FOS" in
      solaris*) echo "[coli] Solaris Not Support!" && exit 3 ;;
      darwin*)  ;;
      linux*)   ;;
      *bsd*)    ;;
      *)        echo "[coli] Unknown OS: $FOS!" && exit 3 ;;
    esac
    echo [coli] prepare for $FOS

    cd $DEBUG
    cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE=ON .. && make VERBOSE=1
    cd $ROOT
}

function build_release() {
    cd $ROOT/src
    if [ -f Token.yy.cpp ]; then rm Token.yy.cpp; fi
    if [ -f Parser.tab.hpp ]; then rm Parser.tab.hpp; fi
    if [ -f Parser.tab.cpp ]; then rm Parser.tab.cpp; fi
    flex -o Token.yy.cpp Token.l
    bison -d -o Parser.tab.cpp Parser.y

    cd $ROOT
    RELEASE=release
    if [ ! -d $RELEASE ]; then mkdir $RELEASE; fi

    case "$FOS" in
      solaris*) echo "[coli] Solaris Not Support!" && exit 3 ;;
      darwin*)  ;;
      linux*)   ;;
      *bsd*)    ;;
      *)        echo "[coli] Unknown OS: $FOS!" && exit 3 ;;
    esac
    echo [coli] prepare for $FOS

    cd $RELEASE && cmake -DCMAKE_BUILD_TYPE=Release .. && make && cd $ROOT
    cd $ROOT
}

function build_help() {
    echo [coli] help message:
    echo   1. build help    - show help message.
    echo   2. build init    - initialize third party dependencies.
    echo   3. build debug   - build debug version.
    echo   4. build release - build release version.
    echo   5. build all     - build both debug and release version.
    echo   6. build install - build and install.
    echo   7. build test    - run unit tests.
    echo   8. build clean   - clean build objects.
}

# ---- main ----

if [ "$1" = "help" ]; then
    build_help
    exit 0
fi

if [ "$1" = "init" ]; then
    init_all
    case "$FOS" in
      darwin*)  init_macos ;;
      linux*)   init_linux ;;
      *bsd*)    init_bsd ;;
      *)        ;;
    esac
    exit 0
fi

if [ "$1" = "clean" ]; then
    clean_all
    exit 0
fi

if [ "$1" = "purge" ]; then
    purge_all
    exit 0
fi

if [ "$1" = "install" ]; then
    echo [coli] error! install not implmented !
    exit 3
fi

if [ "$1" = "test" ]; then
    debug/test/coli-test
    exit 0
fi

if [ "$1" = "debug" ]; then
    if [ "$2" = "-d" ]; then
        build_debug -d
    else
        build_debug
    fi
    exit 0
fi

if [ "$1" = "release" ]; then
    build_release
    exit 0
fi

if [ "$1" = "all" ]; then
    build_debug
    build_release
    exit 0
fi

if [ "$#" -gt 1 ]; then
    build_help
    exit 0
fi

build_release
