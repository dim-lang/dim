// Copyright 2019- <coli-lang>
// Apache License Version 2.0

#include "Token.h"
#include "Ast.h"
#include "Parser.tab.hpp"

std::string TokenName(int token) {
  switch (token) {
  case T_EOF:
    return "eof";
  case T_TRUE:
    return "true";
  case T_FALSE:
    return "false";
  case T_LET:
    return "let";
  case T_VAR:
    return "var";
  case T_VAL:
    return "val";
  case T_NIL:
    return "nil";
  case T_IF:
    return "if";
  case T_ELSEIF:
    return "elseif";
  case T_ELSE:
    return "else";
  case T_FOR:
    return "for";
  case T_FOREACH:
    return "foreach";
  case T_IN:
    return "in";
  case T_WHILE:
    return "while";
  case T_BREAK:
    return "break";
  case T_CONTINUE:
    return "continue";
  case T_SWITCH:
    return "switch";
  case T_CASE:
    return "case";
  case T_DEFAULT:
    return "default";
  case T_FUNC:
    return "func";
  case T_CLASS:
    return "class";
  case T_TYPE:
    return "type";
  case T_IS:
    return "is";
  case T_ISINSTANCE:
    return "isinstance";
  case T_IMPORT:
    return "import";
  case T_RETURN:
    return "return";
  case T_VOID:
    return "void";
  case T_LOGIC_AND:
    return "and";
  case T_LOGIC_OR:
    return "or";
  case T_LOGIC_NOT:
    return "not";
  case T_ASYNC:
    return "async";
  case T_AWAIT:
    return "await";
  case T_ADD:
    return "+";
  case T_SUB:
    return "-";
  case T_MUL:
    return "*";
  case T_DIV:
    return "/";
  case T_MOD:
    return "%";
  case T_BIT_NOT:
    return "~";
  case T_BIT_AND:
    return "&";
  case T_BIT_OR:
    return "|";
  case T_BIT_XOR:
    return "^";
  case T_BIT_LSHIFT:
    return "<<";
  case T_BIT_RSHIFT:
    return ">>";
  case T_BIT_ARSHIFT:
    return ">>>";
  case T_ASSIGN:
    return "=";
  case T_ADD_ASSIGN:
    return "+=";
  case T_SUB_ASSIGN:
    return "-=";
  case T_MUL_ASSIGN:
    return "*=";
  case T_DIV_ASSIGN:
    return "/=";
  case T_MOD_ASSIGN:
    return "%=";
  case T_BIT_AND_ASSIGN:
    return "&=";
  case T_BIT_OR_ASSIGN:
    return "|=";
  case T_BIT_XOR_ASSIGN:
    return "^=";
  case T_BIT_LSHIFT_ASSIGN:
    return "<<=";
  case T_BIT_RSHIFT_ASSIGN:
    return ">>=";
  case T_BIT_ARSHIFT_ASSIGN:
    return ">>>=";
  case T_EQ:
    return "==";
  case T_NEQ:
    return "!=";
  case T_LT:
    return "<";
  case T_LE:
    return "<=";
  case T_GT:
    return ">";
  case T_GE:
    return ">=";
  case T_LPAREN:
    return "(";
  case T_RPAREN:
    return ")";
  case T_LBRACKET:
    return "[";
  case T_RBRACKET:
    return "]";
  case T_LBRACE:
    return "{";
  case T_RBRACE:
    return "}";
  case T_COMMA:
    return ",";
  case T_SEMI:
    return ";";
  case T_QUESTION:
    return "?";
  case T_COLON:
    return ":";
  case T_DOT:
    return ".";
  case T_BIG_ARROW:
    return "=>";
  default:
    return "unknown_token_name";
  }
}
