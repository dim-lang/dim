// Copyright 2019- <fastype.org>
// Apache License Version 2.0

#include "dsl/Type.h"
#include "Exception.h"
#include "Hasher.h"

namespace dsl {

icu::UnicodeString Type::name(int value) {
  switch (value) {
    // token type
  case FDSL_EOF:
    return UNICODE_STRING_SIMPLE("FDSL_EOF");
  case FDSL_INTEGER:
    return UNICODE_STRING_SIMPLE("FDSL_INTEGER");
  case FDSL_REAL:
    return UNICODE_STRING_SIMPLE("FDSL_REAL");
  case FDSL_OPERATOR:
    return UNICODE_STRING_SIMPLE("FDSL_OPERATOR");
  case FDSL_COMPARATOR:
    return UNICODE_STRING_SIMPLE("FDSL_COMPARATOR");
  case FDSL_BOOLEAN:
    return UNICODE_STRING_SIMPLE("FDSL_BOOLEAN");
  case FDSL_IDENTIFIER:
    return UNICODE_STRING_SIMPLE("FDSL_IDENTIFIER");
  case FDSL_PUNCTUATION:
    return UNICODE_STRING_SIMPLE("FDSL_PUNCTUATION");
  case FDSL_KEYWORD:
    return UNICODE_STRING_SIMPLE("FDSL_KEYWORD");
  case FDSL_STRING:
    return UNICODE_STRING_SIMPLE("FDSL_STRING");

    // ast type
  case FDSL_PROGRAM:
    return UNICODE_STRING_SIMPLE("FDSL_PROGRAM");
  case FDSL_STATEMENT_LIST:
    return UNICODE_STRING_SIMPLE("FDSL_STATEMENT_LIST");
  case FDSL_DECLARATION:
    return UNICODE_STRING_SIMPLE("FDSL_DECLARATION");
  case FDSL_STATEMENT:
    return UNICODE_STRING_SIMPLE("FDSL_STATEMENT");
  case FDSL_VARIABLE_DECLARATION:
    return UNICODE_STRING_SIMPLE("FDSL_VARIABLE_DECLARATION");
  case FDSL_FUNCTION_DECLARATION:
    return UNICODE_STRING_SIMPLE("FDSL_FUNCTION_DECLARATION");
  case FDSL_CLASS_DECLARATION:
    return UNICODE_STRING_SIMPLE("FDSL_CLASS_DECLARATION");
  case FDSL_COMPOUND_STATEMENT:
    return UNICODE_STRING_SIMPLE("FDSL_COMPOUND_STATEMENT");
  case FDSL_ASSIGNMENT_STATEMENT:
    return UNICODE_STRING_SIMPLE("FDSL_ASSIGNMENT_STATEMENT");
  case FDSL_EMPTY_STATEMENT:
    return UNICODE_STRING_SIMPLE("FDSL_EMPTY_STATEMENT");
  case FDSL_RETURN_STATEMENT:
    return UNICODE_STRING_SIMPLE("FDSL_RETURN_STATEMENT");
  case FDSL_BINARY_OP:
    return UNICODE_STRING_SIMPLE("FDSL_BINARY_OP");
  case FDSL_UNARY_OP:
    return UNICODE_STRING_SIMPLE("FDSL_UNARY_OP");
  case FDSL_VARIABLE:
    return UNICODE_STRING_SIMPLE("FDSL_VARIABLE");
  case FDSL_INTEGER_CONSTANT:
    return UNICODE_STRING_SIMPLE("FDSL_INTEGER_CONSTANT");
  case FDSL_REAL_CONSTANT:
    return UNICODE_STRING_SIMPLE("FDSL_REAL_CONSTANT");
  case FDSL_BOOLEAN_CONSTANT:
    return UNICODE_STRING_SIMPLE("FDSL_BOOLEAN_CONSTANT");
  case FDSL_STRING_CONSTANT:
    return UNICODE_STRING_SIMPLE("FDSL_STRING_CONSTANT");

    // symbol type
  case FDSL_BUILTIN_TYPE_SYMBOL:
    return UNICODE_STRING_SIMPLE("FDSL_BUILTIN_TYPE_SYMBOL");
  case FDSL_VARIABLE_SYMBOL:
    return UNICODE_STRING_SIMPLE("FDSL_VARIABLE_SYMBOL");
  case FDSL_FUNCTION_SYMBOL:
    return UNICODE_STRING_SIMPLE("FDSL_FUNCTION_SYMBOL");
  default:
    FTHROW("invalid dsl type value:{}", value);
  }
}

std::string Type::utf8Name(int value) {
  std::string _1;
  return name(value).toUTF8String(_1);
}

int Type::value(const icu::UnicodeString &name) {
  static const std::unordered_map<icu::UnicodeString, int> typeMapping = {
      // token type
      {UNICODE_STRING_SIMPLE("FDSL_EOF"), FDSL_EOF},
      {UNICODE_STRING_SIMPLE("FDSL_INTEGER"), FDSL_INTEGER},
      {UNICODE_STRING_SIMPLE("FDSL_REAL"), FDSL_REAL},
      {UNICODE_STRING_SIMPLE("FDSL_OPERATOR"), FDSL_OPERATOR},
      {UNICODE_STRING_SIMPLE("FDSL_COMPARATOR"), FDSL_COMPARATOR},
      {UNICODE_STRING_SIMPLE("FDSL_BOOLEAN"), FDSL_BOOLEAN},
      {UNICODE_STRING_SIMPLE("FDSL_IDENTIFIER"), FDSL_IDENTIFIER},
      {UNICODE_STRING_SIMPLE("FDSL_PUNCTUATION"), FDSL_PUNCTUATION},
      {UNICODE_STRING_SIMPLE("FDSL_KEYWORD"), FDSL_KEYWORD},
      {UNICODE_STRING_SIMPLE("FDSL_STRING"), FDSL_STRING},

      // ast type
      {UNICODE_STRING_SIMPLE("FDSL_PROGRAM"), FDSL_PROGRAM},
      {UNICODE_STRING_SIMPLE("FDSL_STATEMENT_LIST"), FDSL_STATEMENT_LIST},
      {UNICODE_STRING_SIMPLE("FDSL_DECLARATION"), FDSL_DECLARATION},
      {UNICODE_STRING_SIMPLE("FDSL_STATEMENT"), FDSL_STATEMENT},
      {UNICODE_STRING_SIMPLE("FDSL_VARIABLE_DECLARATION"),
       FDSL_VARIABLE_DECLARATION},
      {UNICODE_STRING_SIMPLE("FDSL_FUNCTION_DECLARATION"),
       FDSL_FUNCTION_DECLARATION},
      {UNICODE_STRING_SIMPLE("FDSL_CLASS_DECLARATION"), FDSL_CLASS_DECLARATION},
      {UNICODE_STRING_SIMPLE("FDSL_COMPOUND_STATEMENT"),
       FDSL_COMPOUND_STATEMENT},
      {UNICODE_STRING_SIMPLE("FDSL_ASSIGNMENT_STATEMENT"),
       FDSL_ASSIGNMENT_STATEMENT},
      {UNICODE_STRING_SIMPLE("FDSL_EMPTY_STATEMENT"), FDSL_EMPTY_STATEMENT},
      {UNICODE_STRING_SIMPLE("FDSL_RETURN_STATEMENT"), FDSL_RETURN_STATEMENT},
      {UNICODE_STRING_SIMPLE("FDSL_BINARY_OP"), FDSL_BINARY_OP},
      {UNICODE_STRING_SIMPLE("FDSL_UNARY_OP"), FDSL_UNARY_OP},
      {UNICODE_STRING_SIMPLE("FDSL_VARIABLE"), FDSL_VARIABLE},
      {UNICODE_STRING_SIMPLE("FDSL_INTEGER_CONSTANT"), FDSL_INTEGER_CONSTANT},
      {UNICODE_STRING_SIMPLE("FDSL_REAL_CONSTANT"), FDSL_REAL_CONSTANT},
      {UNICODE_STRING_SIMPLE("FDSL_BOOLEAN_CONSTANT"), FDSL_BOOLEAN_CONSTANT},
      {UNICODE_STRING_SIMPLE("FDSL_STRING_CONSTANT"), FDSL_STRING_CONSTANT},

      // symbol type
      {UNICODE_STRING_SIMPLE("FDSL_BUILTIN_TYPE_SYMBOL"),
       FDSL_BUILTIN_TYPE_SYMBOL},
      {UNICODE_STRING_SIMPLE("FDSL_VARIABLE_SYMBOL"), FDSL_VARIABLE_SYMBOL},
      {UNICODE_STRING_SIMPLE("FDSL_FUNCTION_SYMBOL"), FDSL_FUNCTION_SYMBOL},
  };
  auto it = typeMapping.find(name);
  if (it == typeMapping.end()) {
    std::string _1;
    FTHROW("invalid dsl type name:{}", name.toUTF8String(_1));
  }
  return it->second;
}

} // namespace dsl
