def cached_character(s:char, n:int):char {
    if (!s || n <= 0)
        return 0;
    var key:ulong = hash(s, n);
    return if (key == 0) s else s+1;
}

def duplicate(s:char, n:int):char = cached_character(s, n)

def duplicate(s:char):char = cached_character(s, strlen(s))

def startWith(
        s:char,
        begin:int,
        end:int):boolean = all_of(begin, end, s == begin)

def replace(s:char, n:int, from:char, fromn:int, to:char, ton:int):char {
    if (!s || n <= 0) return s
    if (!from || fromn <= 0) return s
    var i:int = 0
    while (i < n) {
        if (n - i >= fromn && strncmp(s+i, from, fromn) == 0) {
            if (to && ton > 0) {
                print(to, ton)
            }
            i += fromn
        } else {
            print(from, fromn)
            i++;
        }
    }
    s
}
